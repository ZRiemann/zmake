#!/bin/bash

# 输出文件名
zmake_all="Makefile"

# 软件版号本注入
zversion="1.0.0"
zver_major=${zversion%%.*}
zver_minor=${zversion#*.}
zver_minor=${zver_minor%.*}
zver_revision=${zversion##*.}
# base => alpha => beta => RC => relaease
zver_albt="alpha"
# git version
zgit_rev=$(which git)
if [ -z ${zgit_rev##*/git} ] && [ -d .git ]; then
    zgit_rev=$(git rev-parse HEAD)
else
    zgit_rev="nil"
fi


# 编译器选项控制
zcc=gcc
zar=ar
zcflag="-Wall -Werror"

# *.obj *.out 输出到 bin 目录下
zdest=bin
zinstall_bin="/usr/local/bin"
zinstall_lib="/usr/local/lib"
zinstall_inc="/usr/local/include"


# 定义编译链接输出
# 注意：为简化脚本代码，必须将当前项目所依赖的项目放到前面；
#       如zsitst 依赖 zsi，则zsi必须在zsitst前面；
# all 对应 Makefile 的all
all=(
#    zsi
#    zsitst
)

# 对应一个输出项目
# type    [so|app|ar] lib输出静态库,app输出可执行程序, ar 静态库
# build   [yes|no]  是否生成目标输出
# install [yes|no]  是否加入到 make install 中
# source  [fold1 fold2 ...] 文件夹集合(推荐，头文件与源文件在一起可以不指定[headers])
#         [file1 file2 ...] 单文件集合(满足单文件夹下包含多个目标)
#         [folder1 file1 ...] 混合源码
# headers [fold1 file1 ...] 满足特殊头文件依赖关系跟踪
# dependence [dep-list] 依赖的项目
# install_headers 库头文件列表，安装约束：必须是单个文件夹或单个文件
# 根据实际项目需求，用户自定义扩展

#declare -A zsi
#zsi=([type]=so
#     [build]=yes
#     [install]=yes
#     [install_headers]="src/zsi"
#     [source]="src")

# 自动检测头文件依赖
# 自动依赖 libzsi.so 目标
#declare -A zsitst
#zsitst=([type]=app
#        [build]=yes
#        [install]=false
#        [headers]="test"
#        [source]="test/main.c test/tst_fsio.c test/tst_s_expression.c test/tst_buffer.c test/tst_stl.c test/tst_app.c"
#        [links]="-lzsi -pthread")

################################################################################
# 支持git submodules
# 将子模块编译输出到当前项目输出目标中
# ...

################################################################################
# 支持检查安装第三方库脚本
# 可以在 configure 中做